mixin chart({data, number, label})
  figure.chart&attributes(attributes)
    .chart__content
      svg.chart__img.donut(width="100%" height="100%" viewBox="0 0 42 42")
        defs
          each item, index in data
            linearGradient(id = `gradient-${index}` x1="0%" y1="0%" x2="0%" y2="100%")
              stop(offset = "0%" stop-color = item.color[0])
              stop(offset = "100%" stop-color = item.color[1])
        circle.donut-ring(cx="21" cy="21" r="15.91549430918954" fill="transparent" stroke="white" stroke-width="1")
        - let fullSegmentsWidth = 0
        each segment, idx in data
          - const segmentGap = 0.8
          - const segmentWidth = segment.percents - segmentGap
          - const firstSegmentWidth = (25 - segmentGap / 2);
          - const segmentOffset = (!idx) ? firstSegmentWidth : (100 - fullSegmentsWidth + firstSegmentWidth - segmentGap * idx)
          - fullSegmentsWidth += segmentWidth
          circle.donut-segment(
            cx="21"
            cy="21"
            r="15.91549430918954"
            fill="transparent"
            stroke=`url(#gradient-${idx})`
            stroke-width="1"
            stroke-dasharray=`${segmentWidth} ${100 - segmentWidth}`
            stroke-dashoffset = segmentOffset
            )
        g.chart-text
          text.chart-number(x="50%" y="49%")= number
          text.chart-label(x="50%" y="60%")= label[Math.round(number / 2.7)] || label[2]
    figcaption.chart__legend
      ul.chart__legend-list
        each value in data
          li.chart__legend-item
            span.chart__legend-color(style = `background: linear-gradient(180deg, ${value.color[0]} 0%, ${value.color[1]} 100%)`)
            span.chart__legend-text= value.label
